{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","RegExp","TextField","str","name","value","label","placeholder","required","onChange","validateNoExtraWhitespace","validateUrl","setIsValid","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","hasWhitespaceValidationError","test","isValidUrl","evaluationValue","hasValidationError","useEffect","trim","htmlFor","type","classNames","event","target","onBlur","NewMovie","addMovie","count","setCount","inputTitle","setTitle","inputDescription","setDescription","inputImageUrl","setImageUrl","inputImdbUrl","setImdbUrl","inputImdbId","setImdbId","isImageUrlValid","setImageUrlValid","isImdbUrlValid","setImdbUrlValid","isFormValid","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","newMovieFromForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.379ff22c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validateNoExtraWhitespace?: boolean;\n  validateUrl?: boolean;\n  setIsValid?: (isValid: boolean) => void;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nconst pattern = new RegExp(\n  '^((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)(?:[-;:&=+$,\\\\w]+@)?[A-Za-z0-9.-]+|'\n  + '(?:www\\\\.|[-;:&=+$,\\\\w]+@)[A-Za-z0-9.-]+)'\n  + '((?:\\\\/[+~%/.\\\\w-_]*)?\\\\??(?:[-+=&;%@,.\\\\w_]*)#?(?:[,.!/\\\\\\\\\\\\w]*))?)$',\n);\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  validateNoExtraWhitespace = false,\n  validateUrl = false,\n  setIsValid,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const isValidNoExtraWhitespace = (\n    str: string,\n  ) => (!/^[\\s]+$/.test(str) && !/^\\s+/.test(str));\n\n  const hasWhitespaceValidationError\n  = validateNoExtraWhitespace && !isValidNoExtraWhitespace(value);\n\n  const isValidUrl = (evaluationValue: string) => pattern.test(evaluationValue);\n  const hasValidationError = touched && validateUrl && !isValidUrl(value);\n\n  useEffect(() => {\n    if (setIsValid) {\n      setIsValid(!hasValidationError && (\n        !required || (required && value.trim() !== '')\n      ));\n    }\n  }, [value, touched]);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || (touched && !isValidUrl),\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {hasValidationError && (\n        <p className=\"help is-danger\">{`${label} must be a valid URL`}</p>\n      )}\n      {hasWhitespaceValidationError && (\n        <p className=\"help is-danger\">{`${label} should not contain leading/trailing/multiple spaces.`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype NewMovieProps = {\n  addMovie: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<NewMovieProps> = ({ addMovie }) => {\n  const [count, setCount] = useState(0);\n  const [inputTitle, setTitle] = useState('');\n  const [inputDescription, setDescription] = useState('');\n  const [inputImageUrl, setImageUrl] = useState('');\n  const [inputImdbUrl, setImdbUrl] = useState('');\n  const [inputImdbId, setImdbId] = useState('');\n\n  const [isImageUrlValid, setImageUrlValid] = useState(true);\n  const [isImdbUrlValid, setImdbUrlValid] = useState(true);\n\n  const isFormValid\n  = inputTitle.trim() !== ''\n  && inputImageUrl.trim() !== ''\n  && inputImdbUrl.trim() !== ''\n  && inputImdbId.trim() !== ''\n  && isImageUrlValid\n  && isImdbUrlValid;\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newMovieFromForm = {\n      title: inputTitle,\n      description: inputDescription,\n      imgUrl: inputImageUrl,\n      imdbUrl: inputImdbUrl,\n      imdbId: inputImdbId,\n    };\n\n    addMovie(newMovieFromForm);\n\n    setTitle('');\n    setDescription('');\n    setImageUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setCount(count + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={inputTitle}\n        onChange={setTitle}\n        validateNoExtraWhitespace\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={inputDescription}\n        onChange={setDescription}\n        validateNoExtraWhitespace\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={inputImageUrl}\n        onChange={setImageUrl}\n        validateUrl\n        setIsValid={setImageUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={inputImdbUrl}\n        onChange={setImdbUrl}\n        validateUrl\n        setIsValid={setImdbUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={inputImdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (newMovieFromForm: Movie) => {\n    setMovies([...movies, newMovieFromForm]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}