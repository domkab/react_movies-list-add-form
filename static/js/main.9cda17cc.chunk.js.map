{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","hasWhiteSpaceError","hasValidUrlError","hasValidImdbError","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","hasValidationError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","state","setState","isValidNoExtraWhitespace","str","test","pattern","RegExp","isValidUrl","url","isValidImdbId","handleInputChange","fieldName","validator","prevState","onSubmit","preventDefault","newMovieFromForm","newValue","disabled","Object","entries","every","key","trim","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9cda17cc.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange: (newValue: string) => void,\n  hasWhiteSpaceError?: boolean;\n  hasValidUrlError?: boolean;\n  hasValidImdbError?: boolean;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  hasWhiteSpaceError = false,\n  hasValidUrlError,\n  hasValidImdbError,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const hasValidationError = touched && hasValidUrlError;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || (touched && hasValidUrlError),\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {hasValidationError && (\n        <p className=\"help is-danger\">{`${label} must be a valid URL`}</p>\n      )}\n      {hasWhiteSpaceError && (\n        <p className=\"help is-danger\">{`${label} should not contain leading/trailing/multiple spaces.`}</p>\n      )}\n      {hasValidImdbError && (\n        <p className=\"help is-danger\">{`${label} should be in the format 'tt' followed by numbers`}</p>\n      )}\n\n    </div>\n  );\n};\n\n// const handleInputChange = (\n//   newValue: string,\n//   setter: React.Dispatch<React.SetStateAction<string>>,\n//   setError: React.Dispatch<React.SetStateAction<boolean>>,\n// ) => {\n//   setter(newValue);\n//   const hasWhiteSpaceError = !isValidNoExtraWhitespace(newValue);\n\n//   setError(hasWhiteSpaceError);\n// };\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype NewMovieProps = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<NewMovieProps> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const initialState = {\n    title: { value: '', hasError: false },\n    description: { value: '', hasError: false },\n    imgUrl: { value: '', hasError: false },\n    imdbUrl: { value: '', hasError: false },\n    imdbId: { value: '', hasError: false },\n  };\n\n  const [state, setState] = useState(initialState);\n\n  const isValidNoExtraWhitespace = (str: string) => (\n    !/^[\\s]+$/.test(str)\n      && !/^\\s+/.test(str)\n      && !/\\s{2,}/.test(str)\n  );\n\n  const pattern = new RegExp(\n    '^((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)(?:[-;:&=+$,\\\\w]+@)?[A-Za-z0-9.-]+|'\n    + '(?:www\\\\.|[-;:&=+$,\\\\w]+@)[A-Za-z0-9.-]+)'\n    + '((?:\\\\/[+~%/.\\\\w-_]*)?\\\\??(?:[-+=&;%@,.\\\\w_]*)#?(?:[,.!/\\\\\\\\\\\\w]*))?)$',\n  );\n\n  const isValidUrl = (url: string) => pattern.test(url);\n\n  const isValidImdbId = (str: string) => (/^tt\\d+$/.test(str));\n\n  const handleInputChange = (\n    fieldName: string,\n    value: string,\n    validator: (str: string) => boolean,\n  ) => {\n    const hasError = !validator(value);\n\n    setState(prevState => ({\n      ...prevState,\n      [fieldName]: {\n        value,\n        hasError,\n      },\n    }));\n  };\n\n  const isFormValid = () => {\n    return Object.entries(state)\n      .every(([key, { value, hasError }]) => {\n        if (key === 'description') {\n          return !hasError;\n        }\n\n        return value.trim() !== '' && !hasError;\n      });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newMovieFromForm = {\n      title: state.title.value,\n      description: state.description.value,\n      imgUrl: state.imgUrl.value,\n      imdbUrl: state.imdbUrl.value,\n      imdbId: state.imdbId.value,\n    };\n\n    onAdd(newMovieFromForm);\n\n    setState({\n      title: { value: '', hasError: false },\n      description: { value: '', hasError: false },\n      imgUrl: { value: '', hasError: false },\n      imdbUrl: { value: '', hasError: false },\n      imdbId: { value: '', hasError: false },\n    });\n\n    setCount(count + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={state.title.value}\n        onChange={(newValue: string) => handleInputChange(\n          'title',\n          newValue,\n          isValidNoExtraWhitespace,\n        )}\n        hasWhiteSpaceError={state.title.hasError}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={state.description.value}\n        onChange={(newValue: string) => handleInputChange(\n          'description',\n          newValue,\n          isValidNoExtraWhitespace,\n        )}\n        hasWhiteSpaceError={state.description.hasError}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={state.imgUrl.value}\n        onChange={(newValue: string) => handleInputChange(\n          'imgUrl',\n          newValue,\n          isValidUrl,\n        )}\n        hasValidUrlError={state.imgUrl.hasError}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={state.imdbUrl.value}\n        onChange={(newValue: string) => handleInputChange(\n          'imdbUrl',\n          newValue,\n          isValidUrl,\n        )}\n        hasValidUrlError={state.imdbUrl.hasError}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={state.imdbId.value}\n        onChange={(newValue: string) => handleInputChange(\n          'imdbId',\n          newValue,\n          isValidImdbId,\n        )}\n        hasValidImdbError={state.imdbId.hasError}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const onAdd = (newMovieFromForm: Movie) => {\n    setMovies([...movies, newMovieFromForm]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}